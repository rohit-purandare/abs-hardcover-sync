name: Security Scan

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 3 * * 0'  # Weekly on Sunday at 3 AM UTC

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
        pip install bandit safety
    
    - name: Run Bandit security linter
      run: |
        # Run Bandit with JSON output for detailed reporting
        bandit -r . -f json -o bandit-report.json || true
        # Also run with text output for immediate feedback
        bandit -r . -f txt || true
    
    - name: Run Safety check for known vulnerabilities
      run: |
        # Check for known security vulnerabilities in dependencies
        safety check --json --output safety-report.json || true
        # Also run with text output for immediate feedback
        safety check || true
    
    - name: Check for hardcoded secrets
      run: |
        # Check for potential hardcoded API keys, tokens, etc.
        echo "Checking for potential hardcoded secrets..."
        if grep -r -i "api_key\|token\|password\|secret" . --exclude-dir=.git --exclude-dir=venv --exclude-dir=__pycache__ --exclude=*.log --exclude=secrets.env; then
          echo "⚠️  Potential hardcoded secrets found. Please review the above lines."
          echo "This is just a warning - some of these may be legitimate (like in examples or tests)."
        else
          echo "✅ No obvious hardcoded secrets found."
        fi
    
    - name: Check for exposed credentials in logs
      run: |
        # Check if any log files contain sensitive information
        echo "Checking log files for sensitive information..."
        if [ -f "abs_hardcover_sync.log" ]; then
          if grep -i "token\|api_key\|password" abs_hardcover_sync.log; then
            echo "⚠️  Log file may contain sensitive information. Please review."
          else
            echo "✅ Log file appears to be clean of sensitive information."
          fi
        else
          echo "ℹ️  No log file found to check."
        fi
    
    - name: Validate secrets.env.example
      run: |
        # Ensure secrets.env.example doesn't contain real credentials
        echo "Validating secrets.env.example..."
        if [ -f "secrets.env.example" ]; then
          if grep -v "^#" secrets.env.example | grep -v "^$" | grep -v "your_" | grep -v "example"; then
            echo "⚠️  secrets.env.example may contain real credentials. Please review."
            exit 1
          else
            echo "✅ secrets.env.example appears to contain only placeholder values."
          fi
        else
          echo "ℹ️  No secrets.env.example found."
        fi
    
    - name: Check .gitignore for sensitive files
      run: |
        # Ensure sensitive files are properly ignored
        echo "Checking .gitignore for sensitive files..."
        if grep -q "secrets.env" .gitignore && grep -q "\.env" .gitignore; then
          echo "✅ secrets.env and .env files are properly ignored."
        else
          echo "⚠️  secrets.env or .env files may not be properly ignored."
        fi
        
        if grep -q "\.edition_cache\.json" .gitignore; then
          echo "✅ Edition cache file is properly ignored."
        else
          echo "⚠️  Edition cache file may not be properly ignored."
        fi
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_number }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30
    
    - name: Comment on PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let comment = '## 🔒 Security Scan Results\n\n';
          
          // Check if security reports exist
          if (fs.existsSync('bandit-report.json')) {
            const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
            const issues = banditReport.results || [];
            
            if (issues.length > 0) {
              comment += '### ⚠️ Bandit Security Issues Found\n\n';
              issues.forEach(issue => {
                comment += `- **${issue.issue_severity}**: ${issue.issue_text} (${issue.filename}:${issue.line_number})\n`;
              });
              comment += '\n';
            } else {
              comment += '### ✅ No Bandit security issues found\n\n';
            }
          }
          
          if (fs.existsSync('safety-report.json')) {
            const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
            const vulnerabilities = safetyReport || [];
            
            if (vulnerabilities.length > 0) {
              comment += '### ⚠️ Safety Vulnerabilities Found\n\n';
              vulnerabilities.forEach(vuln => {
                comment += `- **${vuln.package}**: ${vuln.vulnerability_id} - ${vuln.advisory}\n`;
              });
              comment += '\n';
            } else {
              comment += '### ✅ No Safety vulnerabilities found\n\n';
            }
          }
          
          comment += '---\n*This comment was automatically generated by the security scan workflow.*';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 